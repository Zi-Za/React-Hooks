import React, { useEffect, useContext, useState } from 'react'
import { useParams, Link, Navigate } from 'react-router-dom'

import useFetch from 'hooks/useFetch'
import Loading from 'components/loading'
import TagList from 'components/tagList'
import ErrorMessage from 'components/errorMessage'
import {CurrentUserContext} from 'contexts/currentUser'

const Article = props => {
  const {slug} = useParams()
  // const navigate = useNavigate();
  const apiUrl = `/articles/${slug}`
  const [
    {
      response: fetchArticleResponse, 
      error: fetchArticleError, 
      isLoading: fetchArticleIsLoading
    }, 
    doFetch
  ] = useFetch(apiUrl)
  const [{response: deleteArticleResponse}, doDeleteArticle] = useFetch(apiUrl)
  const [currentUserState] = useContext(CurrentUserContext)
  const [isSuccessfullDelete, setIsSuccessfullDelete] = useState(false)

  const isAuthor = () => {
    if (!fetchArticleResponse || !currentUserState.isLoggedIn) {
      return false
    }
    return fetchArticleResponse.article.author.username === currentUserState.currentUser.username
  }

  const deleteArticle = () => {
    doDeleteArticle({
      method: 'delete',
    })
  }

  console.log('isAuthor', isAuthor())

  useEffect(() => {
    doFetch()
  }, [doFetch])

  useEffect(() => {
    if (!deleteArticleResponse && deleteArticleResponse !== "") {
      return
    }
    setIsSuccessfullDelete(true)
  }, [deleteArticleResponse])

  if (isSuccessfullDelete) {
    return <Navigate to='/'/>
  }

  return (
    <div className='article-page'>
      <div className='banner'>
        {!fetchArticleIsLoading && fetchArticleResponse && (
          <div className='container'>
            <h1>{fetchArticleResponse.article.title}</h1>
            <div className='article-meta'>
              <Link to={`/profiles/${fetchArticleResponse.article.author.username}`}>
                <img src={fetchArticleResponse.article.author.image} alt=''/>
              </Link>
              <div className='info'>
                <Link to={`/profiles/${fetchArticleResponse.article.author.username}`}>
                  {fetchArticleResponse.article.author.username}
                </Link>
              <span className='date'>{fetchArticleResponse.article.createdAt}</span>
              </div>
              {isAuthor() && (
                <span>
                  <Link 
                    className='btn btn-outline-secondary btn-sm' 
                    to={`/articles/${fetchArticleResponse.article.slug}/edit`}
                  >
                    <i className='ion-edit'></i>
                    Edit article
                  </Link>
                  <button 
                    className='btn btn-outline-danger btn-sm'
                    onClick={deleteArticle}
                  >
                    <i className='ion-trash-a'></i>
                    Delete article
                  </button>
                </span>
              )}
            </div>
          </div>
        )}
      </div>
      <div className='container page'>
        {fetchArticleIsLoading && <Loading/>}
        {fetchArticleError && <ErrorMessage/>}
        {!fetchArticleIsLoading && fetchArticleResponse && (
          <div className='row article-content'>
            <div className='col-xs-12'>
              <div>
                <p>{fetchArticleResponse.article.body}</p>
                {/* <button type='submit' className='btn btn-lg pull-xs-right btn-primary' onClick={() =>{
                  navigate(`${apiUrl}/edit`)
                }}>
                  Edit Article
                </button> */}
              </div>
              <TagList tags={fetchArticleResponse.article.tagList} />
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default Article